{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "anaconda-cloud": {},
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.5.2"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/kjh8331267/KDIS_python_lecture/blob/main/20240911\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "opHkm77ErrIU"
      },
      "source": [
        "# 1. Jupyter notebooks\n",
        "This webpage is called a Jupyter notebook. A notebook is a place to write programs and view their results.\n",
        "\n",
        "## 1.1. Text cells\n",
        "### 1.1.1. Somthing new!\n",
        "In a notebook, each rectangle containing text or code is called a *cell*.\n",
        "\n",
        "Text cells (like this one) can be edited by double-clicking on them. They're written in a simple format called [Markdown](http://daringfireball.net/projects/markdown/syntax) to add formatting and section headings.  You don't need to learn Markdown, but you might want to.\n",
        "\n",
        "After you edit a text cell, double-click the \"preview\" on the right or hold down the `shift` key and press `return` or `enter` to confirm any changes. (Try not to delete the instructions of the lab.)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "smu7Xb_2rrIV"
      },
      "source": [
        "**Question 1.1.1.** This paragraph is in its own text cell.  Try editing it so that this sentence is the last sentence in the paragraph, and then double-click the \"preview\" or hold down the `shift` key and press `return` or `enter`.  This sentence, for example, should be deleted.  So should this one."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YSyxlQBsrrIV"
      },
      "source": [
        "## 1.2. Code cells\n",
        "Other cells contain code in the Python 3 language. Running a code cell will execute all of the code it contains.\n",
        "\n",
        "To run the code in a code cell, first click on that cell to activate it. Next, either press ‚ñ∂| or hold down the `shift` key and press `return` or `enter`.\n",
        "\n",
        "Try running this cell:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "l32JK9QyrrIV",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "071701de-0a95-4783-fa3f-aaeb521e2b7e"
      },
      "source": [
        "print(\"Hello, World!\")"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello, World!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rX1QtRJprrIW"
      },
      "source": [
        "And this one:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7SU4scbNrrIW",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8e35139e-f779-4950-f6d8-e5f5e0a66cb4"
      },
      "source": [
        "print(\"\\N{WAVING HAND SIGN}, \\N{EARTH GLOBE ASIA-AUSTRALIA}!\")"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "üëã, üåè!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sGi9eS8yrrIW"
      },
      "source": [
        "The fundamental building block of Python code is an expression. Cells can contain multiple lines with multiple expressions. When you run a cell, the lines of code are executed in the order in which they appear. Every `print` expression prints a line. Run the next cell and notice the order of the output."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IR67GWrzrrIW",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fed09ee5-63c5-4fb2-f551-e7a2423a7de6"
      },
      "source": [
        "print(\"First this line is printed, \\nand then this one.\")"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "First this line is printed, \n",
            "and then this one.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-Qpx13uIrrIW"
      },
      "source": [
        "**Question 1.2.1.** Change the cell above so that it prints out:\n",
        "\n",
        "    First this line,\n",
        "    then the whole üåè,\n",
        "    and then this one.\n",
        "\n",
        "*Hint:* If you're stuck on the Earth symbol for more than a few minutes, try talking to a neighbor or the instructor. That's a good idea for any lab problem."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "F0iTQFgFq9qR",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2609332c-f801-40c0-9cb9-01276693f0e5"
      },
      "source": [
        "print('First this line, \\n then the whole \\N{EARTH GLOBE ASIA-AUSTRALIA},\\n and then this one.')"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "First this line, \n",
            " then the whole üåè,\n",
            " and then this one.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "45v69tVVrrIW"
      },
      "source": [
        "## 1.3. Writing Jupyter notebooks\n",
        "You can use Jupyter notebooks for your own projects or documents.  When you make your own notebook, you'll need to create your own cells for text and code.\n",
        "\n",
        "To add a cell, click the + Code or + Text button in the menu bar.\n",
        "\n",
        "**Question 1.3.1.** Add a code cell below this one.  Write code in it that prints out:\n",
        "   \n",
        "    A whole new cell! ‚ô™üåè‚ô™\n",
        "\n",
        "(That musical note symbol is like the Earth symbol.  Its long-form name is `\\N{EIGHTH NOTE}`.)\n",
        "\n",
        "Run your cell to verify that it works."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "t-csfQbUBI2k",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f7316b0d-3963-4fd2-cc42-cf7fd24847b6"
      },
      "source": [
        "print('A whole new cell! \\N{EIGHTH NOTE}\\N{EARTH GLOBE ASIA-AUSTRALIA}\\N{EIGHTH NOTE}')"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "A whole new cell! ‚ô™üåè‚ô™\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "H2BuaF3GrrIX"
      },
      "source": [
        "## 1.4. Errors\n",
        "Python is a language, and like natural human languages, it has rules.  It differs from natural language in two important ways:\n",
        "1. The rules are *simple*.  You can learn most of them in a few weeks and gain reasonable proficiency with the language in a semester.\n",
        "2. The rules are *rigid*.  If you're proficient in a natural language, you can understand a non-proficient speaker, glossing over small mistakes.  A computer running Python code is not smart enough to do that.\n",
        "\n",
        "Whenever you write code, you'll make mistakes.  When you run a code cell that has errors, Python will sometimes produce error messages to tell you what you did wrong.\n",
        "\n",
        "Errors are okay; even experienced programmers make many errors.  When you make an error, you just have to find the source of the problem, fix it, and move on.\n",
        "\n",
        "We have made an error in the next cell.  Run it and see what happens."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RfNkhNbArrIX",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8ce3aabd-5413-4188-b017-0be9ac0b1bc3"
      },
      "source": [
        "print(\"This line is missing something.\")"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "This line is missing something.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hBZsOtJ5rrIX"
      },
      "source": [
        "You should see something like this (minus our annotations):\n",
        "\n",
        "![](https://drive.google.com/uc?export=view&id=1I_eyrvDlpEzCTUCA4RLCEpBssVX7FtzF)\n",
        "\n",
        "The last line of the error output attempts to tell you what went wrong.  The *syntax* of a language is its structure, and this `SyntaxError` tells you that you have created an illegal structure.  \"`EOF`\" means \"end of file,\" so the message is saying Python expected you to write something more (in this case, a right parenthesis) before finishing the cell.\n",
        "\n",
        "There's a lot of terminology in programming languages, but you don't need to know it all in order to program effectively. If you see a cryptic message like this, you can often get by without deciphering it.  (Of course, if you're frustrated, ask a neighbor or the instructor for help.)\n",
        "\n",
        "Try to fix the code above so that you can run the cell and see the intended message instead of an error."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ScfkaRf1rrIY"
      },
      "source": [
        "# 2. Numbers\n",
        "\n",
        "Quantitative information arises everywhere in data science. In addition to representing commands to print out lines, expressions can represent numbers and methods of combining numbers. The expression `3.2500` evaluates to the number 3.25. (Run the cell and see.)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ig2FBKaerrIY",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c4e39842-042d-4543-af6f-3c3d3119ff36"
      },
      "source": [
        "print(3.2500)"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3.25\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2HNK2vXgrrIZ"
      },
      "source": [
        "Notice that we didn't have to `print`. When you run a notebook cell, if the last line has a value, then Jupyter helpfully prints out that value for you. However, it won't print out prior lines automatically."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": true,
        "id": "afk8mtuKrrIZ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8f8a05c5-7c03-4cea-97a7-5bfbae8bf54f"
      },
      "source": [
        "print(2)\n",
        "print(3)\n",
        "print(4)"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GqkK9kSirrIZ"
      },
      "source": [
        "Above, you should see that 4 is the value of the last expression, 2 is printed, but 3 is lost forever because it was neither printed nor last.\n",
        "\n",
        "You don't want to print everything all the time anyway.  But if you feel sorry for 3, change the cell above to print it."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "q8_fwDX_rrIZ"
      },
      "source": [
        "## 2.1. Arithmetic\n",
        "The line in the next cell subtracts.  Its value is what you'd expect.  Run it."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FoAU7H_6rrIZ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "84df7b16-c6c3-434c-a5ec-2511b450683c"
      },
      "source": [
        "3.25 - 1.5"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.75"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WvCW223LtAaz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6c523821-a4e3-4d6a-9ece-b7258087d483"
      },
      "source": [
        "12309571209381 - 12039875812876"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "269695396505"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wU_g98DOrrIZ"
      },
      "source": [
        "Many basic arithmetic operations are built in to Python.  The common operator that differs from typical math notation is `**`, which raises one number to the power of the other. So, `2**3` stands for $2^3$ and evaluates to 8.\n",
        "\n",
        "The order of operations is what you learned in elementary school, and Python also has parentheses.  For example, compare the outputs of the cells below. Use parentheses for making the number of this year!"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7jsYyeOmrrIa"
      },
      "source": [
        "1+6*5-6*3**2*2**3/4*7"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ze5f8da5rrIa"
      },
      "source": [
        "1+(6*5-(6*3))**2*((2**3)/4*7)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5AQyxxu0rrIa"
      },
      "source": [
        "In standard math notation, the first expression is\n",
        "\n",
        "$$1 + 6 \\times 5 - 6 \\times 3^2 \\times \\frac{2^3}{4} \\times 7,$$\n",
        "\n",
        "while the second expression is\n",
        "\n",
        "$$1 + (6 \\times 5 - (6 \\times 3))^2 \\times (\\frac{(2^3)}{4} \\times 7).$$\n",
        "\n",
        "**Question 2.1.1.** Write a Python expression in this next cell that's equal to $5 \\times (3 \\frac{10}{11}) - 50 \\frac{1}{3} + 2^{0.5 \\times 22} - \\frac{7}{33} + 6$.  That's five times three and ten elevenths, minus fifty and a third, plus two to the power of half multiplied by twenty two, minus seven thirty thirds, plus six.  By \"$3 \\frac{10}{11}$\" we mean $3+\\frac{10}{11}$, not $3 \\times \\frac{10}{11}$.\n",
        "\n",
        "Try to use parentheses only when necessary.\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "(5*(3+(10/11)))-(50+(1/3))+(2**(0.5*22))-(7/33)+6"
      ],
      "metadata": {
        "id": "h0TIK2LvFeoe",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3d35507b-8887-4ef0-df8f-a3be85ce99ef"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2023.0"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    }
  ]
}